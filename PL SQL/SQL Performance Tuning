The process of analysing and reducing the processing time is called performance tuning
Plays an important role in OLTP systems where the response time is very less. eg . credit card, debit card transaction, ATM cash withdrawal.
OLTP -Online Transaction Processing system.
OLAP -Online analytical processing system.

SQL Tuning - Iterative process to improve the performance of SQL statement to  measurable and achievable goals.

Tuning from Developers aspect -> tuning the SQL/PLSQL and underlying objects
-> Analyze and create index
-> Rewrite SQL
-> Using Hints
-> Partition Pruning 
-> All improvements done from SQL & its related objects.

Tuning from DBA aspect 
-> Tuning the instance memory parameters , optimizer settings to improve the performance.
-> Tuning the server , CPU, RAM & Network.

How to identify the long running queries?
Where to start with SQL Performance Tuning?
What tools are available to help in addressing performance issue ?
What technical knowledge is needed to tune thye SQL queries
How to check SQL vs PL SQL performance tuning ?
How SQL get executed internally?
How index improve performance?
Other general tips for performance improvement

How an SQL statement gets executed internally?
Once the SQL statement is sent to the database server it goes through a sequence of steps
1. Syntax Check.->
2. Semantic Check.-> checks if the objects mentioned/referred in the SQL statement is present in the database.
3. Shared pool check.->  check the shared pool to reuse the parsed version of query if it was previously executed and available in cache.
    The first three steps together is called parsing.
4. optimization -> Generates multiple SQL plan and compares and picks the optimal plan for execution.
5. Row source generator -> produces binary iterative plan for optimal plan from optimizer , that when executed will iterate through the steps and produce result set.
6. Executor -> Executes the iterative plan and generates the output.
This output/result will be returned back to the calling program.
If the SQL statement is executed and optimal plan is already available with shared pool , it will directly go to execution and omits step 4,5.
Hard parsing -> If the parsed version of the query is not available in shared pool, then database has to regenerate plan and row source for executor.
                when hard parse is happening it is called library cache miss.-> Lower the performance
Soft parsing -> If the query was found in shared pool , then database don't have to generate plan , instead it can directly reuse
                the availabe parsed version and plan for execution.
                when soft parse is happening it is called library cache hit. -> Higher the performance

 select * from v$sql where sql_text like  '%employees%' and sql_text not like '%v$sql%';
 select * from employees where employee_id =100;
 select * from employees where employee_id =101;
 
 Though the structure of both the above sql is same. An hard parsing will happen when the second sql is run. using a bind variable will increase soft parsing.
 

Scenario1 : valid sql statement select * from emp;
Scenario2 
Scenario3 
Scenario4
