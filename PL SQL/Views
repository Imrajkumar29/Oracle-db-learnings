Views - Presents data from the underlying table.Views display the same data in multiple ways.
View do not hold any data of its own. Views are metadata only objects(or can be said as named queries).
View will execute the query and fetch the underlying information from the base table.
It is a logical table created on top of the base table.

force view- If we want to create a view first before the underlying base table is created. But This can be used only when the base table is created.
    with force keyword, view will get created with compilation errors. check user_objects,user_views table for status.
    In user objects status will be invalid before underlying table is created.
    eg :Create or  Replace force View emp_10 as select * from emp where deptno=10;
Read Only constraint -> To restrict dml operatons in the view this is used.
    Create or Replace View student_view as select * from student with read only;
With Check Option Constraint -> Will check if the values inserted(or DML operation performed) in the view ,satisfies the where condition mentioned in the query.
    Eg: create or replace view student_view_ece as select * from student where dept ='ECE' with check option.
    select * from user_constraints where table_name in ('STUDENT_VIEW','STUDENT_VIEW_ECE');--> if we do not specify any
    constraint name oracle will create system defined constraint name.
    to specify user defined constraint name -> Create or Replace View student_view as select * from student with read only constraint read_only_cons;

Select * from user_views; -> to check the list of views created by the user
select * from user_tab_columns where table_name ='EMP_SAL_VIEW' -> to check the column details of a view.
Advantage:
1. Can create any number of views as it is not going to take space.As it is not going to store the data of the base table.
2. Display the same data in multiple ways.
3. Hide unwanted records from other users.

Simple Views - Based on a single table. The records are not grouped. 
  does not contain distinct keyword or pseudocolumn or expression based columns.
  DMLs are allowed.

Composite View - No DMLs are allowed . Other points not allowed in simple views are allowed in complex views.

Materialized Views - This is also a named query which returns the output of a select statement. 
whenever a materialized view is created , the data of the result set is stored in another physical location.
Materialized view holds data in physical location. when materialized view is queried it will return data from 
its physical location and noot look for the underlying table.
Difference !
If any changes are made in base tables , it will immediately reflect in views as it fetches data from underlying table.
But in case of materialized view , it will not reflect immediately. A refresh needs to be 
performed to get the latest data from base tables to the materialized view.
Refreshing materialized view -> exec dbms_mview.refresh('EMP10_MV');

create or replace view emp_view as select * from emp;
Question : Create or Replace view emp_view as select * from emp;
1. If we add a new column to the base table , will that column get added to view?
It will not be added. 
The * used in the query gets replaced with the column names in the meta data stored. can check this in user_views table.
So when new column is added in underlying table ,in this case it will not reflect in the view. 
The view will be in valid status. 
2. If we drop an existing column from the base table , what will happen to view?
If we query the view , it will throw error as it will not be able to find the column in the underlying table.
3. How to check the list of objects used in a view? check user_dependencies table -> to find list of dependent objects.

Write a procedure to create a view for all the tables in the given schema . The view name should be same as table name suffixed with "_V".

Declare 
v_sql VARCHAR2(2000);
BEGIN
FOR i in (SELECT table_name from user_tables) LOOP
This line is commented to explain alternate-- for i in (select object_name from user_objects where object_type ='TABLE')loop 
v_sql := 'create or replace view '||substr(i.table_name,1,28) ||'_v as select * from '||i.table_name;
This line is commented to explain alternate--lv_sql :='create or replace view '||i.object_name||'_v as select * from '||i.object_name;
dbms_output.put_line(v_sql);
EXECUTE IMMEEDIATE v_sql;
END LOOP;
END;

Note: Oracle Table Name greater than 30 character length (Up to 128 char) can be used from Oracle 12.2 Onwards 

### What are Materialized Views in Oracle?

A **Materialized View (MV)** is a database object that stores the result of a query physically. It can be refreshed to keep the data up-to-date with its source tables. Materialized views improve query performance, especially in reporting and data warehousing scenarios, as they avoid the need to re-execute the original query.

Materialized views can be refreshed in different ways:
1. **Complete Refresh**
2. **Fast Refresh**
3. **Force Refresh**
4. **On-Demand or On-Commit Refresh**

### Example: Creating a Materialized View

```sql
CREATE MATERIALIZED VIEW mv_employees
BUILD IMMEDIATE
REFRESH COMPLETE
ON DEMAND
AS
SELECT employee_id, first_name, last_name, department_id, hire_date
FROM employees;
```

- **BUILD IMMEDIATE**: The MV is built immediately when the command is executed.
- **REFRESH COMPLETE**: The entire view is refreshed (details below).
- **ON DEMAND**: The view is refreshed only when requested.

### 1. **Complete Refresh**

A complete refresh **rebuilds the entire materialized view** from scratch by executing the query. It can be resource-intensive but guarantees up-to-date data.

#### Example of Complete Refresh:

```sql
EXEC DBMS_MVIEW.REFRESH('MV_EMPLOYEES', 'C');
```

- `'C'` indicates a **complete** refresh.
- The MV will be rebuilt based on the `employees` table data.

**Output**:
- Materialized view is completely refreshed, reflecting any changes in the `employees` table.

---

### 2. **Fast Refresh**

Fast refresh uses **incremental changes** (captured in materialized view logs) to refresh the MV. Itâ€™s more efficient than a complete refresh but requires a materialized view log on the source tables.

#### Creating a Materialized View Log

Before using fast refresh, create a materialized view log:

```sql
CREATE MATERIALIZED VIEW LOG ON employees
WITH ROWID (first_name, last_name, department_id, hire_date)
INCLUDING NEW VALUES;
```

#### Example of Fast Refresh:

```sql
CREATE MATERIALIZED VIEW mv_employees_fast
BUILD IMMEDIATE
REFRESH FAST
ON DEMAND
AS
SELECT employee_id, first_name, last_name, department_id, hire_date
FROM employees;
```

- **REFRESH FAST**: Instructs Oracle to perform fast refresh using the materialized view log.

**Refresh the View**:

```sql
EXEC DBMS_MVIEW.REFRESH('MV_EMPLOYEES_FAST', 'F');
```

- `'F'` indicates a **fast refresh**.

**Output**:
- Only changes (insertions, updates, deletions) since the last refresh are applied, improving performance.

---

### 3. **Force Refresh**

Force refresh tries to perform a **fast refresh** if possible, and if not, it performs a **complete refresh**.

#### Example of Force Refresh:

```sql
EXEC DBMS_MVIEW.REFRESH('MV_EMPLOYEES', 'FORCE');
```

- Oracle will try a fast refresh, and if it fails (e.g., no materialized view log exists), it defaults to a complete refresh.

**Output**:
- The materialized view is refreshed, choosing the most efficient option.

---

### 4. **Refresh Modes: On Demand vs. On Commit**

- **ON DEMAND**: The materialized view is refreshed when explicitly requested by the user.
- **ON COMMIT**: The materialized view is refreshed automatically when a transaction on the base tables is committed.

#### Example: On-Commit Refresh

```sql
CREATE MATERIALIZED VIEW mv_employees_commit
BUILD IMMEDIATE
REFRESH FAST
ON COMMIT
AS
SELECT employee_id, first_name, last_name, department_id, hire_date
FROM employees;
```

- **ON COMMIT**: Automatically refreshes the materialized view every time a `COMMIT` is issued on the base table.

**Scenario**:
1. Insert new data into the `employees` table:

   ```sql
   INSERT INTO employees (employee_id, first_name, last_name, department_id, hire_date)
   VALUES (205, 'Anna', 'Jones', 30, SYSDATE);
   
   COMMIT;
   ```

2. The materialized view `mv_employees_commit` is **automatically refreshed** after the `COMMIT` command is executed.

**Output**:
- The new data (`Anna Jones`) is immediately visible in the materialized view after the `COMMIT`.

---

### Automatic and Manual Refresh Intervals

You can schedule automatic refreshes for materialized views using the `START WITH` and `NEXT` clauses.

#### Example: Automatic Daily Refresh

```sql
CREATE MATERIALIZED VIEW mv_employees_auto
BUILD IMMEDIATE
REFRESH COMPLETE
START WITH SYSDATE
NEXT SYSDATE + 1
AS
SELECT employee_id, first_name, last_name, department_id, hire_date
FROM employees;
```

- **START WITH SYSDATE**: Refresh starts immediately.
- **NEXT SYSDATE + 1**: The refresh occurs daily.

**Output**:
- The materialized view is automatically refreshed every day.

---

### Viewing the Materialized View Refresh

You can check the last refresh time of a materialized view from the `USER_MVIEWS` view.

```sql
SELECT mview_name, last_refresh_date
FROM user_mviews
WHERE mview_name = 'MV_EMPLOYEES';
```

**Output**:
```
MVIEW_NAME         LAST_REFRESH_DATE
----------------   ---------------------
MV_EMPLOYEES       13-SEP-2024 10:35:21
```

---

### Summary of Refresh Options:
- **Complete Refresh**: Rebuilds the entire materialized view.
- **Fast Refresh**: Updates only the changed rows using the materialized view log.
- **Force Refresh**: Chooses fast refresh if possible, otherwise falls back to complete refresh.
- **On Demand**: Refreshes the materialized view only when explicitly requested.
- **On Commit**: Automatically refreshes the materialized view when changes in the base table are committed.

I hope this clears up the concept of materialized views and their refresh mechanisms! Let me know if you'd like more examples or details.

