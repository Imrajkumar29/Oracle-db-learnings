Views - Presents data from the underlying table.Views display the same data in multiple ways.
View do not hold any data of its own. Views are metadata only objects(or can be said as named queries).
View will execute the query and fetch the underlying information from the base table.
It is a logical table created on top of the base table.

force view- If we want to create a view first before the underlying base table is created. But This can be used only when the base table is created.
    with force keyword, view will get created with compilation errors. check user_objects,user_views table for status.
    In user objects status will be invalid before underlying table is created.
    eg :Create or  Replace force View emp_10 as select * from emp where deptno=10;
Read Only constraint -> To restrict dml operatons in the view this is used.
    Create or Replace View student_view as select * from student with read only;
With Check Option Constraint -> Will check if the values inserted(or DML operation performed) in the view ,satisfies the where condition mentioned in the query.
    Eg: create or replace view student_view_ece as select * from student where dept ='ECE' with check option.
    select * from user_constraints where table_name in ('STUDENT_VIEW','STUDENT_VIEW_ECE');--> if we do not specify any
    constraint name oracle will create system defined constraint name.
    to specify user defined constraint name -> Create or Replace View student_view as select * from student with read only constraint read_only_cons;

Select * from user_views; -> to check the list of views created by the user
select * from user_tab_columns where table_name ='EMP_SAL_VIEW' -> to check the column details of a view.
Advantage:
1. Can create any number of views as it is not going to take space.As it is not going to store the data of the base table.
2. Display the same data in multiple ways.
3. Hide unwanted records from other users.

Simple Views - Based on a single table. The records are not grouped. 
  does not contain distinct keyword or pseudocolumn or expression based columns.
  DMLs are allowed.

Composite View - No DMLs are allowed . Other points not allowed in simple views are allowed in complex views.

Materialized Views - This is also a named query which returns the output of a select statement. 
whenever a materialized view is created , the data of the result set is stored in another physical location.
Materialized view holds data in physical location. when materialized view is queried it will return data from 
its physical location and noot look for the underlying table.
Difference !
If any changes are made in base tables , it will immediately reflect in views as it fetches data from underlying table.
But in case of materialized view , it will not reflect immediately. A refresh needs to be 
performed to get the latest data from base tables to the materialized view.
Refreshing materialized view -> exec dbms_mview.refresh('EMP10_MV');

create or replace view emp_view as select * from emp;
Question : Create or Replace view emp_view as select * from emp;
1. If we add a new column to the base table , will that column get added to view?
It will not be added. 
The * used in the query gets replaced with the column names in the meta data stored. can check this in user_views table.
So when new column is added in underlying table ,in this case it will not reflect in the view.
2. If we drop an existing column from the base table , what will happen to view?
If we query the view , it will throw error as it will not be able to find the column in the underlying table.
3. How to check the list of objects used in a view? check user_dependencies table -> to find list of dependent objects.

Write a procedure to create a view for all the tables in the given schema . The view name should be same as table name suffixed with "_V".

Declare 
v_sql VARCHAR2(2000);
BEGIN
FOR i in (SELECT table_name from user_tables) LOOP
This line is commented to explain alternate-- for i in (select object_name from user_objects where object_type ='TABLE')loop 
v_sql := 'create or replace view '||substr(i.table_name,1,28) ||'_v as select * from '||i.table_name;
This line is commented to explain alternate--lv_sql :='create or replace view '||i.object_name||'_v as select * from '||i.object_name;
dbms_output.put_line(v_sql);
EXECUTE IMMEEDIATE v_sql;
END LOOP;
END;

Note: Oracle Table Name greater than 30 character length (Up to 128 char) can be used from Oracle 12.2 Onwards 

