user_erros- table to check compile time errors
  Logical errors will be raised on runtime - this is called exception.

Exception 
  Any abnormal condition or say event that interrupts the normal flow of your programâ€™s instructions at run time is an exception.
  Or in simple words you can say an exception is a run time error.

There are two types of PL/SQL exceptions in Oracle database.

System-defined exceptions -> Named Exception, Un-named Exception
User-defined exceptions

Info byte:
  Oracle avails two utility functions SQLCODE & SQLERRM to retrieve the error code and message for last occured exception.

System-defined exceptions 
  System defined exceptions majorly have a negative error code and error message. These errors have a short name which is used with the exception handler.
  no data found , too_many_rows
exact fetch returns more than one row'
  
User-Define Exceptions
Unlike System-Define Exception, User-Define Exceptions are raised explicitly in the body of the PL/SQL block
(more specifically inside the BEGIN-END section) using the RAISE Statement.

There are three ways of declaring user-defined exceptions in Oracle Database.
    By declaring a variable of EXCEPTION type in declaration section.
    Declare user-defined exception using PRAGMA EXCEPTION_INIT function.
    RAISE_APPLICATION_ERROR method.
    
Eg for the first way mentioned above
          SET SERVEROUTPUT ON;
          DECLARE
            var_dividend NUMBER := 24;
            var_divisor NUMBER := 0;
            var_result NUMBER;
            ex_DivZero EXCEPTION;
          BEGIN
            IF var_divisor = 0 THEN
              RAISE ex_DivZero;
            END IF;
            var_result := var_dividend/var_divisor;
            DBMS_OUTPUT.PUT_LINE('Result = ' ||var_result);
            EXCEPTION WHEN ex_DivZero THEN
                DBMS_OUTPUT.PUT_LINE('Error Error - Your Divisor is Zero');
          END;
          /

What is RAISE_APPLICATION_ERROR method?
  RAISE APPLICATION ERROR is a stored procedure which comes in-built with Oracle software.  Using this procedure you can associate 
  an error number with the custom error message.   Combining both the error number as well as the custom error message you can
  compose an error string which looks similar  to those default error strings which are displayed by Oracle engine when an error occurs.
  You can find RAISE_APPLICATION_ERROR procedure inside DBMS_STANDARD package.
  
How many errors can we generate using RAISE_APPLICATION_ERROR procedure?
    RAISE_APPLICATION_ERROR procedure allows us to number our errors from -20,000 to -20,999 thus we can say that using RAISE_APPLICATION_ERROR 
    procedure we can generate 1000 errors.
    
    Eg: In this exception handling section they have called a SQLERRM function using DBMS OUTPUT statement. 
    This is a utility function provided by Oracle which retrieves the error message for the last occurred exception
    
       ACCEPT var_age NUMBER PROMPT 'What is your age';
      DECLARE
        age   NUMBER := &var_age;
      BEGIN
        IF age < 18 THEN
          RAISE_APPLICATION_ERROR (-20008, 'you should be 18 or above for the DRINK!');
        END IF; 
        DBMS_OUTPUT.PUT_LINE ('Sure, What would you like to have?'); 
        EXCEPTION WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE (SQLERRM);
      END;
    
What is PRAGMA EXCEPTION_INIT?
Pragma Exception_Init is a two part statement where first part is made up of keyword PRAGMA and second part is the Exception_Init call.

PRAGMA Keyword
A pragma is a compiler directive which indicates that the Statements followed by keyword PRAGMA is a compiler directive statement
this means that the statement will be processed at the compile time & not at the runtime.

PRAGMA Exception_Init
Exception_init helps you in associating an exception name with an Oracle error number. 
In other words we can say that using Exception_Init you can name the exception.

Why name the exception?
Yes, there is a way of declaring user-define exception without the name and that is by using Raise_Exception_Error procedure.
This indeed is a simple and easy way but as we learnt in the last tutorial that to handle exceptions without name we use OTHERS exception handler.

You can save all those time wasting efforts just by naming the exception, that way you can design an exception handler specific to the name
of your exception which will be easily traceable. This is the advantage of naming the exception.

      DECLARE
        ex_age    EXCEPTION;
        age       NUMBER    := 17;
        PRAGMA EXCEPTION_INIT(ex_age, -20008);
      BEGIN
        IF age<18 THEN
          RAISE_APPLICATION_ERROR(-20008, 'You should be 18 or above for the drinks!');
        END IF;

        DBMS_OUTPUT.PUT_LINE('Sure! What would you like to have?');

        EXCEPTION WHEN ex_age THEN
          DBMS_OUTPUT.PUT_LINE(SQLCODE||' '||SQLERRM);   
      END;
      /
      
      Output of above proc:
      -20008 ORA-20008: You should be 18 or above for the drinks!
PL/SQL procedure successfully completed.
