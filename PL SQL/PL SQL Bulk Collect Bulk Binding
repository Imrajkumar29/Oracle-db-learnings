PL SQL and SQL Communicate as follows : To run select into or DML statement , the PL SQL engine sends the query or DML statement to the SQL engine.
The SQL engine runs the query or DML statement and returns the result to the PL SQL engine.

Within oracle there are two engines that executes the code
PL SQL Engine -> executes all procedural code
SQL Engine -> executes all sql statements

Binding
Assigning values to PL/SQL variables that appear in SQL statements is called binding.

What is Context Switching?
  Whenever you write a PL/SQL block or say a PL/SQL program and execute it, the PL/SQL runtime engine starts processing it line by line.
  This engine processes all the PL/SQL statements by itself but it passes all the SQL statements which you have coded into that PL/SQL block to the SQL runtime engine. 
  Those SQL statements will then get processed separately by the SQL engine. Once it is done processing them the SQL engine then returns the result back to the PL/SQL 
  engine.So that a combined result can be produced by the latter. This to and fro hopping of control is called context switching.
  For eg: in the below program the control swithces between PL SQL engine and SQL engine 1000 times.
  
  Declare 
  lv_name varchar2(100);
  Begin
  For I in 1..1000 loop
  select ename into lv_name from emp where empno =I;
  end loop;
  end;
  
How does context switching affect the query performance?
  Context switching has a direct impact on the performance of the query. The higher the hopping of controls the greater will be the overhead which
  in turn will degrade the performance. This means that lesser the context switching better will be the query performance.
  
Bulk Binding
  Bulk binding is a process by which entire sql statement information will be binded back to PL SQL variable in a single switch or fewer no of switches.
  
Types of Binding
in-bind-> the value from PL SQL engine is assigned to SQL engine. eg:insert , merge , update statements stores pl sql variable in the database.
when a collection variable is used to transfer from dml content data to table, it is called in bind. Using Forall statement the inbind operation can be performed.

out-bind-> from SQL statements information is returned back to PL SQL variable. eg : returning into clause of an insert, update,delete, execute immediate statement.
when dml operation is performed and modified data/(result of a dml statement) has to be put into a collection , outbind happens. 
using (returning clause,bulk  collectect into) with dml statement this is accomplished.

Define -> When a select or fetch statement is used in a loop. assigns db value to a PL SQL variable.
whenever we want to hold output of select statement/cursor fetch statement in a plsql collection variable. bulk collect into statement is used for doing this.

Bulk data Processing
  For in binds and out binds , bulk SQL uses bulk binding , that is , it binds entire collection of values at once.
  A query that uses bulk SQL can return any number of rows , without using a FETCH statement for each one.
  To implement bulk binding oracle provides two statements
    Bulk Collect Clause
    Forll Statement
  The process of fetching batches of data from PL/SQL runtime engine to SQL engine and vice versa is called Bulk Data Processing

How many bulk data processing statements do we have?
We have one bulk data processing clause which is Bulk Collect and one bulk data processing statement which is FORALL in Oracle Database
  

Bulk collect is all about reducing context switches and improving the performance of the query.

Traditional way to load data from table to PL sql collection
Eg:
  set serveroutput on;
  declare
  type emp_name_list is Table of varchar2(100);
  lv_emp_name_list emp_name_list :=emp_name_list();
  Begin
  For i in (select * from employees)
  loop
  lv_emp_name_list.extend;
  lv_emp_name_list(lv_emp_name_list.last):=i.first_name;
  end loop;
  For i in lv_emp_name_list.first..lv_emp_name_list.last
  loop 
  dbms_output.put_line(lv_emp_name_list(i));
  end loop;
  end;
 
 Using Bulk Collect to load data from table to PL sql Collection
  declare
  type emp_name_list is Table of varchar2(100);
  lv_emp_name_list2 emp_name_list :=emp_name_list();
  Begin

  select first_name bulk collect into lv_emp_name_list2 from employees order by employee_id;

  For i in lv_emp_name_list2.first..lv_emp_name_list2.count
  loop 
  dbms_output.put_line(lv_emp_name_list2(i));
  end loop;
  end;

Bulk Collect with Fetch statement
SET SERVEROUTPUT ON;
DECLARE
--Create an explicit cursor
    CURSOR exp_cur IS
    SELECT first_name FROM employees;

    --Declare collection for holding the data 
    TYPE nt_fName   IS TABLE OF VARCHAR2 (20);
    fname   nt_fName;
BEGIN
    OPEN exp_cur;
    LOOP
        FETCH exp_cur BULK COLLECT INTO fname;
        EXIT WHEN fname.count=0;
        --Print data
        FOR idx IN fname.FIRST.. fname.LAST
        LOOP
            DBMS_OUTPUT.PUT_LINE (idx||' '||fname(idx) );
        END LOOP; 
    END LOOP;
    CLOSE exp_cur;
END;
/

Forall Statement
  The forall statement runs one DML statement multiple times, with different values in the values and where clauses
  The different values come from existing, populated collections. It is usually faster than the FOR loop.
  Forall executes the DML statement for each and every row present in the collection without switching between SQL and PL SQL engine.
  
  PL SQL Block to load all employee from collection into employee_bkup table
  
  Traditional for loop 
      Declare 
    Type t_emp_list is Table of employees%rowtype;
    lv_emp_list t_emp_list :=t_emp_list();
    Begin
    select * bulk collect into lv_emp_list from employees;
    for i in lv_emp_list.first..lv_emp_list.last
    loop
    insert into employees_bkup values lv_emp_list(i);
    end loop;
    end;
  
Using Forall : note that there is no loop and end loop statements after the forall statement. it is followed by only one dml statement.
  Declare 
Type t_emp_list is Table of employees%rowtype;
lv_emp_list t_emp_list :=t_emp_list();
Begin
select * bulk collect into lv_emp_list from employees;
forall i in lv_emp_list.first..lv_emp_list.last
    insert into employees_bkup values lv_emp_list(i);
end;

Advantages of Forall
  Reduces the context switches bw the sql and plsql engine and improves the performance of insert statement.
  Effectively transfer the data from collection into table
  
Limitations of Forall
  Forall must be followed by single DML statement
  Usage of other statements within forall is not allowed 
  you cannot refer individual record of collection instead the collection as whole will be used by DML statement.
  Collection subscript must be index variable. Expression in subscript is not allowed. like lv_emp_name_list(i+1) is not allowed.
  
Difference between for and forall
  For is iterative statement which executes for each and every value specified in the range. Forall is not an Iterative statement. Its a declarative
  statement to execute the DML statement with all the values given in the collection.
  Any number of statements can be written within loop and end loop of for statement. Only one DML statement is allowed after forall statement.
  Forall - no context switching
  individual records of collection can be accessed in for loop.Collection will be used as a whole in DML statement.
  
