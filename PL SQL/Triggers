Triggers are named PL/SQL blocks which are stored in the database.  We can also say that they are specialized stored programs
which execute implicitly when a triggering event occurs. This means we cannot call and execute them directly 
instead they only get triggered by events in the database.

Events Which Fires the Database Triggers

These events can be anything such as

A DML Statement – An Update, Insert or Delete statement executing on any table of your database. 
You can program your trigger to execute either BEFORE or AFTER executing your DML statement.
For example, you can create a trigger which will get fired Before the Update. Similarly, 
you can create a trigger which will get triggered after the execution of your INSERT DML statement.


CREATE TABLE superheroes (
  sh_name VARCHAR2 (15)
); 

CREATE OR REPLACE TRIGGER bi_Superheroes
BEFORE INSERT ON superheroes
FOR EACH ROW
ENABLE
DECLARE
  v_user  VARCHAR2 (15);
BEGIN
 SELECT user INTO v_user FROM dual;
 DBMS_OUTPUT.PUT_LINE('You Just Inserted a Row Mr.'|| v_user); 
END;
/

INSERT INTO superheroes VALUES ('Ironman');

Above three examples showed you 3 different triggers for 3 different DML events on one table.
Don’t you think that if we can cover all these 3 events in just 1 trigger

INSERT, UPDATE, DELETE All in One DML Trigger Using IF-THEN-ELSIF
CREATE OR REPLACE TRIGGER tr_superheroes
BEFORE INSERT OR DELETE OR UPDATE ON superheroes
FOR EACH ROW
ENABLE
DECLARE
  v_user  VARCHAR2(15);
BEGIN

  SELECT 
    user INTO v_user FROM dual;
  IF INSERTING THEN
    DBMS_OUTPUT.PUT_LINE('one line inserted by '||v_user);
  ELSIF DELETING THEN
    DBMS_OUTPUT.PUT_LINE('one line Deleted by '||v_user);
  ELSIF UPDATING THEN
    DBMS_OUTPUT.PUT_LINE('one line Updated by '||v_user);
  END IF;
END;
/

delete from superheroes;

Table Auditing
Table auditing means keeping a track of all the dml activities performed on a specific table of the database for example which user Inserted,
updated or deleted a row from the table and when. It is like spying on the users who are messing your table’s data.

Suppose you want to keep an eye on the users who are inserting, updating or deleting data from the ‘Superheroes’ table. Let’s see how we can achieve this. 

CREATE TABLE sh_audit(
  new_name varchar2(30),
  old_name varchar2(30),
  user_name varchar2(30),
  entry_date varchar2(30),
  operation  varchar2(30)
);

This table sh_audit has 5 columns which will store the auditing information such as the new data inserted or updated, 
old data which is updated or deleted from the table, name of the user who did it along with the date and time, also the type of DML operation performed.

Next we will write a trigger on the source table superheroes and will store the data into the auditing table sh_audit.

CREATE OR REPLACE trigger superheroes_audit
BEFORE INSERT OR DELETE OR UPDATE ON superheroes
FOR EACH ROW
ENABLE
DECLARE
  v_user varchar2 (30);
  v_date  varchar2(30);
BEGIN
  SELECT user, TO_CHAR(sysdate, 'DD/MON/YYYY HH24:MI:SS') INTO v_user, v_date  FROM dual;
  IF INSERTING THEN
    INSERT INTO sh_audit (new_name,old_name, user_name, entry_date, operation) 
    VALUES(:NEW.SH_NAME, Null , v_user, v_date, 'Insert');  
  ELSIF DELETING THEN
    INSERT INTO sh_audit (new_name,old_name, user_name, entry_date, operation)
    VALUES(NULL,:OLD.SH_NAME, v_user, v_date, 'Delete');
  ELSIF UPDATING THEN
    INSERT INTO sh_audit (new_name,old_name, user_name, entry_date, operation) 
    VALUES(:NEW.SH_NAME, :OLD.SH_NAME, v_user, v_date,'Update');
  END IF;
END;
/

Pseudo Records (New/Old)
If you will carefully see the Insert statements used in the IF-THEN-ELSIF statements in the above code,
we used some Pseudo Records such as ‘:New’ or ‘:Old’ followed by the name of the column of our source table sh_name.
These Psuedo Records helps us in fetching data from the sh_name column of the underlying source table ‘Superheroes’ and storing it into the audit table sh_audit.

Pseudo Record ‘: NEW’, allows you to access a row currently being processed. In other words, 
when a row is being inserted or updated into the superheroes table. 
Whereas Pseudo Record ‘: OLD’ allows you to access a row which is already being either Updated or Deleted from the superheroes table.

In order to fetch the data from the source table, you have to first write the proper Pseudo Record (New/Old) followed by dot (.)
and the name of the column of the source table whose value you want to fetch.
For example in our case we want to fetch the data from sh_name column which belongs to our source table superheroes. 
Thus we will write “: New. sh_name” for fetching the current value and to fetch the previously stored value we will write “: OLD. sh_name”.
Once the values are fetched the INSERT dml will store these values into the respective columns of the audit table.

Restriction on Pseudo Record
For an INSERT trigger, OLD contain no values, and NEW contain the new values.
For an UPDATE trigger, OLD contain the old values, and NEW contain the new values.
For a DELETE trigger, OLD contain the old values, and NEW contain no values.

INSERT INTO superheroes VALUES ('Superman');
Similarly you can write Update and Delete DML statements on Superheroes table.

UPDATE SUPERHEROES SET SH_NAME = 'Ironman' WHERE SH_NAME='Superman';
Or
DELETE FROM superheroes WHERE SH_NAME = 'Ironman';

As soon as you execute any of these DML statements on the underlying table superheroes, 
the trigger will execute in the background and insert the audit data into the audit table sh_audit.
____________________________________________________________________________________________________________________________________________________________
A DDL Statement – Next type of triggering statement can be a DDL Statement such as CREATE or ALTER.
These triggers can also be executed either BEFORE or AFTER the execution of your DDL statement. 
These triggers are generally used by DBAs for auditing purposes. And they really come in handy
when you want to keep an eye on the various changes on your schema. For instance, who created the object or which user. Just like some cool spy tricks.

A system event. – Yes, you can create a trigger on a system event. And by a system event, I mean shut down or startup of your database.

A User Events – Another type of triggering event can be User Events such as log off or log on onto your database. 
You can create a trigger which will either execute before or after the event. Furthermore, 
it will record the information such as time of event occur, the username who created it.
________________________________________________________________________________________________________________________________________________________________
Types of Database Triggers
There are 5 types of triggers in the Oracle database. 3 of them are based on the triggering event 
DML Trigger, DDL Trigger,System or Database Event triggers, 
Instead-of Trigger, Compound triggers

Instead-of Trigger
This is a type of trigger which enables you to stop and redirect the performance of a DML statement. 
Often this type of trigger helps you in managing the way you write to non-updatable views. You can also 
see the application of business rules by INSTEAD OF triggers where they insert, update or delete rows directly 
in tables that are defining updatable views.  Alternatively, sometimes the INSTEAD OF triggers are also seen inserting, 
updating or deleting rows in designated tables that are otherwise unrelated to the view.

Compound triggers
These are multi-tasking triggers that act as both statement as well as row-level triggers when the data is inserted, 
updated or deleted from a table. You can capture information at four timing points using this trigger:
before the firing statement;
prior to the change of each row from the firing statement;
post each row changes from the firing statement;
after the firing statement.
All these types of triggers can be used to audit, check, save and replace the values. 
Even before they are changed right when there is a need to take action at the statement as well as at row event levels.


Uses of Database triggers.
Using database triggers we can enforce business rules that can’t be defined by using integrity constants.
Using triggers we can gain strong control over the security.
We can also collect statistical information on the table access.
We can automatically generate values for derived columns such as auto increment numeric primary key.
Using database triggers we can prevent the invalid transactions.
_________________________________________________________________________________________________________
Restriction on The Database Triggers
The maximum size of the database trigger body must not exceed 32,760 bytes. This is because triggers’ bodies are stored in LONG datatypes columns.
A trigger may not issue transaction control statements or TCL statements such as COMMIT, ROLLBACK or SAVEPOINT. 
All operations performed when the trigger fires, become part of a transaction. Therefore whenever this transaction is rolled back or committed it leads 
to the respective rolling back or committing of the operations performed. Any function or procedure called by a database trigger may not issue a 
transactional control statement. That is unless it contains an autonomous transaction.
Declaring LONG or LONG RAW variable is not permissible in the body of the trigger.
__________________________________________________________________________________________________________
   

