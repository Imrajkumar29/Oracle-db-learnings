Data Integrity -> The data stored in oracle db should follow certain business rules. 
      eg :reg no - has to be unique 
      Gender -> should have either male or Female value only
      Date of joining -> should be lesser than the current system date.
      
Ways to ensure Data Integrity 
  Enforcing business rules with triggered stored database proedures
  Enforcing the business rules in the code of a database application.(i.e making validations in the application UI when the data is entered).
  Oracle Database integrity constraints which are rules defined at the column or object level that restrict values in the database.
  Using stored procedures to completely control access to data.
  
Integrity Contraint - a rule that restricts the values in a database. 
Use a contraint to define an integrity constraint.

Constraints -> Validate the data for business rules before getting stored into the table.
        Constraints are created as part of the table definition itself.
        The rules are centralized. The data entered by all applications has to adhere to the same integrity constraints.
        Flexibilty . integrity constraints can be disabled and enabled.
                      integrity constraints can be disabled temmporarily to avoid performance overhead when loading large amounts of data.

Types of Contraints- NOT NULL, Unique Key, Primary Key, Foreign Key, Check, REF

NOT NULL - prohibits a column from having null values.

eg : create table emp(empno number, 
      ename varchar2(100) null, 
      address1 varchar2(100) constraint address_not_null not null, 
      address2 varchar2(100) not null,
      address2 varchar3(100)
      );
by default there will be null constraint.Even if null is explicitly mentioned , it will not be in the meta data information.
In the above eg address_not_null is the name of the constraint which is optional. 
address2 will get created with system defined constraint name.

meta data information
      select * from user_constraints where table_name ='EMP';
      select * from user_cons_columns where table_name ='EMP'
Disabling a constraint -> alter table emp disable constraint address_not_null_cons;
      By default the constraint will be created with the enable mode, if we want to create it with disable mode see the below eg:
      eg: address1 varchar2(100) constraint address_not_null not null disable, 
Drop a constraint-> Alter table emp drop constraint address_not_null;

Unique key Constraint -> A unique constraint is a single field or combination of fields that uniquely defines a record.
      Some of the fields can contain null values as long as the combination of values is unique.
 Eg:
 CREATE TABLE supplier
( supplier_id numeric(10) NOT NULL,
  supplier_name varchar2(50) NOT NULL,
  contact_name varchar2(50),
  CONSTRAINT supplier_unique UNIQUE (supplier_id, supplier_name)
);

Primary Key Constraint :In Oracle, a primary key is a single field or combination of fields that uniquely defines a record. 
None of the fields that are part of the primary key can contain a null value. A table can have only one primary key.
In Oracle, a primary key can not contain more than 32 columns.
Eg: 
CREATE TABLE supplier
(
  supplier_id numeric(10) not null,
  supplier_name varchar2(50) not null,
  contact_name varchar2(50),
  CONSTRAINT supplier_pk PRIMARY KEY (supplier_id, supplier_name)
);

Question1 : Table with duplicate entries in production, cannot delete existing rows , However want to prevent further duplicate rows to get inserted?
            Alter table emp add constraint empno_pk_cons primary key(empno) deferrable novalidate;
            The deferrable novalidate keyword added to the constraint will not validate the existing rows in the table but
      it will validate all the further dml operations that are performed in the table.
            We Will not be to create a constraint using alter table statement for table with duplicate rows without the deferrable novalidate
            keyword. If we try it will throw duplicate values exception.

Question2 : Does Creating a primary key constraint always create an index automatically?
    Creating a primary key constraint creates an index automatically but not in all cases.
    Creating a primary key will create a unique index , if an index is not created on the column already.
    
    If an index is already created on the column, creating primary key will not create an unique index.
    Eg: step1 : create table emp(empno number, ename ,varchar2(100));
        step2 : alter table emp add constraint empno_pk_cons primary key(empno);
        step3 : select * from user_constraints where table_name ='EMP';
        step4:  select * from user_ where tablindexes table_name ='EMP';
    Before step2 if : "create index t1 on emp(empno);" statement is used it will create a non unique index. 
    In that case creating a primary key constraint will not creating a primary key constraint will not create an unique index.
    
    Note1: Creating a primary key will create a non unique index when "deferrable novalidate" keyword is used.
    Note2: scenario1-> Dropping a constraint will drop the underlying index provided the index was created as part of the constraint creation.
           scenario2-> if the index is created first and constraint is created to the table later using alter statement , then additionaly when drop index clause
           is used the constraint will get dropped along with the index.
           eg scenario2: Alter table T drop constraint T_PK1 drop index;
    Note3: Dropping the table will drop the index , constraints and triggers associated with the table.
    
Question3 :We use unique index or unique constraint to enforce uniqueness of a column. What's the difference? And when to use what?
          Unique constraint automatically creates an unique index ( but not always).
          Unique constraint is for data integrity whereas unique index is for performance improvement.
          Foreign Key can be created over a unique constraint, not over a unique index.
          Sometimes, we might be interested to create a unique index but not a unique constraint.
          
 Question4 :How many null values are allowed on Unique Constraint column in Oracle?
       Null is not equal to anything in oracle. We cannot compare null using the = operator. 
       The comparison can be done using a) nvl(variable_1,'@')=nvl(variable_2,'@'); b) variable_1 is null and variable_2 is null.
       As each null value is different from one another in oracle (since null is not equal to null). When unique key constraint is in place in a column
       in Oracle ,any number of null values can be there in the column. If the same is done in a column with primary key constraint , 
       inserting null values is not possible.
       The unique key constraint behaves in a different way i different dbs like sql server.
 
 Question5: Can We create Primary Key, NOT NULL and Unique Key constraint in the same column?
      In oracle db we will not be able to create Unique and Primary key constraint on the same column.
              we will be able to create NOT NULL and primary key constraint together.
              The behavious varies across different db's like mysql, sqlserver.
 
 
 
      
