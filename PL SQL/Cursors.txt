Cursor - Cursor is name for a sql query(select statement)
Named location for the memory where the query stores its results.
Cursor is a pointer to the memory location which hold the the information the select statement or DML statement and its result set .

Cursor Types - implicit cursor and explicit cursor
Implicit cursor
Any sql statement That is executed in oracle is through an implicit cursor. 
oracle opens a memory location ,executes it , returns a result and closes the memory location.
We cannot control implicit cursors.

Explicit Cursor
Fully Managed by the dev. 
Declare, Open , Fetch , Close . These 4 steps in the same order. 
Step1: Declare the cursor.
Step2  :Open (cursor name) keyword will execute the sql query and information will be loaded into the memory.
Once the information is loaded to the memory. The pointer points to the first row of the result set.
Step3 : when FetcH (Cursor Name) keyword is the executed, the value pointed in the cursor will loaded into the variable.
Once the record is fetched the pointer will move to the next row in the cursor.
Step4: close (cursor name) keyword is used to close the memory location of the cursor. Close the cursor and release the memory.

V$OPEN_CURSOR(select * from V$OPEN_CURSOR) - dynamic view which holds informationb about all the session cursors.
V$PARAMETER -(select * from  V$PARAMETER where name like '%open_cursors%') value =300 300 is the maximum no cursors that can be open per session.

Cursor Attributes - isopen , found, notfound ,rowcount - can be used to find information about the cursor when it is executed
found ,notfound and rowcount will return invalid cursor if it is used before opening the cursor.
found and notfound cannot be used in implicit cursor. since cursor opened and closed by oracle
isopen - returns true if cursor is open else returns false
not found -While using the fetch keyword in a loop, Use exit when (cursor name) %notfound to check if the cursor has reached the last record 
of the result set in the cursor. notfound is an boolean attribute which returns true when it reaches the end of the result set.
rowcount - retunrs the no of fetches successfully completed. This returns a number.
Syntax: explicit cursor cursor_name%isopen
implicit cursor - sql%isopen, sql%rowcount. isopen always returns false when used with implicit cursor

Explicit Cursor - Named Cursor ,Ref Cursor , For Cursor and Parameterized cursor

Parameterised Cursor - see example below. main advantage is reusability.
in declare ,cursor emp_name_list(p_dept_no number) is select ename from emp where deptno =p_dept_no;
inside begin , open emp_name_list(10);

For Cursor - if we use the cursor only once and  not going to use again FOR cursor is useful. 
no need of seperate open, fetch,exit ,close keywords. this is taken care automatically.
BEGIN
FOR I in (select ename from emp)
LOOP
dbms_output.put_line(I.ename);
END LOOP;
END;
In the above example we can declare a cursor variable and use it in the place of the sql statement. This way we can reuse the cursor again. Thus getting the benefit of for as well as the reusability factor.
Also we can use parameter with for cursor like priniting employees of dept no 10. 10 is the parameter to be passed.

Ref Cursor - Reference to a cursor 
it is a PL SQL data type using which you can declare special type of variable called cursor variable.
Strong ref cursor - cursor with return datatype. 

Ref Cursor Summary
Ref Cursor is a "data type".
Variable created based on Ref Cursor Type is called cursor variable.
Ref Cursor can be opened for different SQL statements. Ref Cursor allows us to execute different sets of sql queries.
In named explicit cursor while declaring itself we will associate the sql query with the cursor but for ref cursor 
we will associtate the sql query while opening the cursor.
Ref Cursor can be opened for dynamically framed sql statements. that is strings for eg : open rc_emp_list_cur for 'select ename from emp'.
It is not mandatory that we fetch the results of the ref cursor into a scalar variable we can also declare a record with %rowtype and
fetch the complete row into that.
ref cursor is very dynamic compared to "explicit named cursor".
Two types of ref cursors - Strong typed ref cursor , Weakly typed ref cursor.
Strongly typed eg :Type ref_cur_type is ref cursor return emp%rowtype . This has to return only emp%rowtype.
Weakly typed - if the return type is not specified then it is a weakly typed ref cursor.
The main advantage of ref cursor is , it can be passed as parameter between PLSQL components.
Ref Cursor can be used to return result to client application API.

eg :
Declare 
Type ref_cur_type is ref cursor;
rc_emp_list_cur ref_cur_type;
v_name varchar2(100);
v_id number;

BEGIN
dbms_output.put_line('employees names');
open rc_emp_list_cur for select ename from emp;

LOOP 
fetch rc_emp_list_cur into v_name;
exit when rc_emp_list_cur%notound;
dbms_output.put_line(v_name);
END loop
close rc_emp_list_cur;

open rc_emp_list_cur for select deptno,dname from dept;

LOOP 
fetch rc_emp_list_cur into v_id,v_name;
exit when rc_emp_list_cur%notound;
dbms_output.put_line(vid||' - '||v_name);
END loop
close rc_emp_list_cur;

END;


