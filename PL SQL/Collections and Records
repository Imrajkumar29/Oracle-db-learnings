Data Types -> Scalar data types and Composite Data types and Reference Types

Scalar Data Types: Can be used to store only one value in one variable
NUMBER, PLS_INTEGER, BINARY_FLOAT,BINARY_DOUBLE
CHAR, VARCHAR2, NCHAR, NVARCHAR2
RAW
BOOLEAN
BLOB, CLOB, NCLOB
DATE, TIMESTAMP

Composite Datatypes:
1.Record : Hold one row of data eg: one row of employee can be stored in a variable.
Can be defined using Type keyword and %rowtype.The type mentioned here refers to the TYPE definition.
The internal components can have different data type, and are called elements.
Each field of a record variable can be accessed by its name with the syntax variable_name.field_name.
Record type cannot be created at schema level.

Example of record with select, insert and update statement usage
--create table emp_bkp as select * from emp where 1=2;
declare
v_emp_rec emp%rowtype;
begin
select * 
into v_emp_rec
from emp 
where empno =5;
-- using insert statement with record
--insert into emp_bkp values v_emp_rec;
-- using update statement with record
--v_emp_rec.sal =V_emp_rec.sal+100;
--v_emp_rec.deptno ='50';
-- update emp set row =v_emp_rec where empno =5;
dbms_output.put_line('emp name='||v_emp_rec.ename);
dbms_output.put_line('salary='||v_emp_rec.sal);
end;

Example of record created from cursor
declare 
cursor c1 is select empno,ename,job from emp;
lv_emp_rec c1% rowtype;
BEGIN
open c1;
fetch c1 into lv_emp_rec;
close c1;
dbms_output.put_line('empno='||lv_emp_rec.empno);
dbms_output.put_line('name='||lv_emp_rec.ename);
dbms_output.put_line('job='||lv_emp_rec.job);
end;

creating a record using type definition
Three ways to assign values to a record is given in the below example : 
using select statement , using record_name.field_name , using constructor at the time of declaration.

Declare 
Type emp_rec_type is record 
(empname varchar2(100), 
empsal number);
-- while using not null constraint in record , value should be assigned to the field while declaration.
--empname varchar2(100) not null:'SIVAM',
-- we can use %type to inherit the datatype of a column from a database table. used to define the datatype of a field/variable
--empname emp.ename%type (table_name.colum_name%type)
emp_rec emp_rec_type;
-- using constructor to assign values to a record
--emp_rec emp_rec_type :=emp_rec_type('SIVA',100);
BEGIN
emp_rec.empname :='SIVA';
emp_rec.empsal :=100;
--select ename,sal into emp_rec from emp where empno =7934;
dbms_output.put_line('empname='||emp_rec.empname);
dbms_output.put_line('empsal='||emp_rec.empsal);
end;

2.Collection : A collection is an ordered group of logically related elements. 
Has three types of collection : Varrray, Nested Table, Associative array.
The internal components always have the same data type, and are called fields. 
Each element of a collection variable can be accessed by its unique index  with the syntax variable_name(index) .
Can be defined using Type keyword to create a collection type and create a variable of that collection type and or %type.

Varrays
Store the elements of same data type 
variable sized array whose no of elements can vary from from zero to the declared maximum size.
The lower bound of index starts from 1.

Define,Declare, initialize,assign, access

Declare
Type V_Array_type is VARRAY(7) of VARCHAR2(30);
v_day V_Array_type := V_Array_type (NULL,NULL,NULL,NULL,NULL,NULL,NULL);
-- when initialized memory for all the 7 elements are allocated
BEGIN
v_day(1):= 'MONDAY';
v_day(2):='TUESDAY';
v_day(3):='Wednesday';
dbms_output.put_line('v_day(1)='||v_day(1));
dbms_output.put_line('v_day(2)='||v_day(2));
end;

Exceptions (not restricted to varrays, but common for all three collections):
Initialization is mandatory otherwise we will get 'Reference to uninitialized collection' exception. we can't leave v_day V_Array_type
without initializing it with empty constructor.
if we execute the below code without extend, then we will get subscription beyond count exception.
if we create array of 7 elements and try to extend it for 8 elements using v_day.extend(8) , susbcript outside of limit exception will occur
Declare
Type V_Array_type is VARRAY(7) of VARCHAR2(30);
v_day V_Array_type := V_Array_type ();
BEGIN
v_day.extend();
-- .extend by default extends one element
-- for extending menory for 2 elements v_day.extend(2);
v_day(1):= 'MONDAY';
dbms_output.put_line('v_day(1)='||v_day(1));
end;

Collection Methods:
LIMIT - gives the maximum number of elements that can be stored in the varray.
COUNT - number of elements stored in the varray. number of elements initialized and assigned.
FIRST - subscript of the first element
LAST -subscript of the last element
TRIM(n) - removes the last n elements from the array.
DELETE - deletes all the elements from the varray. 
EXTEND(n) -  used to extend/ allocate memory for elements of the varray.but cannot exceed the limit specified during initialization.
In the below example can't exceed 7.
PRIOR(n) - prints the previous subscript of the varray.
NEXT(n) - prints the next subscript of the varray.

Note :We will not be able to delete any specific element in the varray. its either everything or from the last.

Declare
Type V_Array_type is VARRAY(7) of VARCHAR2(30);
v_day V_Array_type := V_Array_type (null,null,null);
BEGIN
v_day(1):= 'MONDAY';
v_day(2):='TUESDAY';
dbms_output.put_line('v_day.limit='||v_day.limit); -- prints 7
dbms_output.put_line('v_day.count='||v_day.count); -- prints 3 since we initialized 3 values with null
dbms_output.put_line('v_day.first='||v_day.first); --prints 1
dbms_output.put_line('v_day.last='||v_day.last); -- prints 3
v_day.trim();--removes one element
dbms_output.put_line('v_day.count='||v_day.count); -- prints 2
dbms_output.put_line('v_day.prior='||v_day.prior(2)); -- prints 1
dbms_output.put_line('v_day.prior='||v_day.next(1)); -- prints 2
v_day.delete; -- deletes all the elements
end;
end;

Program for two dimensional array using Varrays
SET SERVEROUTPUT ON
DECLARE
    TYPE matrix_elem_type IS  VARRAY ( 3 ) OF NUMBER;
    TYPE matrix_type IS       VARRAY ( 3 ) OF matrix_elem_type;
    lv_matrix1       matrix_type := matrix_type(NULL,NULL,NULL);
    lv_matrix2       matrix_type := matrix_type(NULL,NULL,NULL);
    lv_matrix3_total matrix_type := matrix_type(NULL,NULL,NULL);
    lv_matrix_elem   matrix_elem_type := matrix_elem_type(NULL,NULL,NULL);
    -- Local Procedure to print the array
    procedure print_array(pin_array matrix_type,pin_desc varchar2) as
    begin
    dbms_output.put_line('Printing the '||pin_desc||' ....');
    for i in pin_array.first..pin_array.last loop
        for j in pin_array(i).first..pin_array(i).last loop
           dbms_output.put(pin_array(i)(j)||'   ');
        end loop;
        dbms_output.put_line('');
    end loop;
    end;
BEGIN
    -- Assing First Array
    lv_matrix_elem := matrix_elem_type(1,2,3);
    lv_matrix1(1) := lv_matrix_elem;
    lv_matrix_elem := matrix_elem_type(4,5,6);
    lv_matrix1(2) := lv_matrix_elem;
    lv_matrix_elem := matrix_elem_type(7,8,9);
    lv_matrix1(3) := lv_matrix_elem;
    
    -- Printing the first array
    print_array(lv_matrix1,'First Array');
    
    -- Assing Second Array
    lv_matrix_elem := matrix_elem_type(11,12,13);
    lv_matrix2(1) := lv_matrix_elem;
    lv_matrix_elem := matrix_elem_type(14,15,16);
    lv_matrix2(2) := lv_matrix_elem;
    lv_matrix_elem := matrix_elem_type(17,18,19);
    lv_matrix2(3) := lv_matrix_elem;
    
    -- Printing the Second array
    print_array(lv_matrix2,'Second Array');    
    
    -- Add Array1+Array2
    
    for i in lv_matrix1.first..lv_matrix1.last loop
        for j in lv_matrix1(i).first..lv_matrix1(i).last loop
        lv_matrix_elem(j) := lv_matrix1(i)(j) + lv_matrix2(i)(j);
        end loop;
        lv_matrix3_total(i) := lv_matrix_elem;
    end loop;
    
    --Print Total Array
    print_array(lv_matrix3_total,'Total Array');    
END;

Nested Table :
Nested Table does not have an upper bound like varray.
In Nested Table we will be able to delete a specific element. That is the element in the middle/specific location can be deleted.
So there is no guarantee that the nested table will be continous. Whereas varray is continously stored.
When choose nested table:
If number of elements to be used are known varray can be used otherwise we can choose nested table.
For continous collection we can use varray, if element deletion is required in the middle we can go for nestedable.
Nested table Collection Methods :
In nested table method go through different behaviour of limit menthod and exists method.
limit-As there is upper bound in nested table, the method limit is of no use .when it is used in code with nested table it doesn't throw exception but prints empty.
First - will return the index of the first element
Last - will return the index of the last element
count -number of elements that are initialized and for which memeory is alloted.
trim- delete one element from the last.
trim(n)- deletes n elements from the last.
prior- will give previous index/subscript.
next - will give next index.
delete(n)- will delete the element in index n.
delete - deletes all the elements.
exists(n)- checks if element is available in index n.

Eg code for Nested Tables:
Declare 
Type v_nested_tab_type is table of varchar(30);
v_day v_nested_tab_type :=  v_nested_tab_type(null,null,null,null,null,null,null);
BEGIN
v_day(1):= 'Monday';
v_day(2):='Tuesdsay';
v_day(3):='Wednesday';
v_day(4):= 'Thursday';
v_day(5):='Friday';
v_day(6):='Saturdqay';
v_day(7):='Sunday';
dbms_output.put_line('v_day(1)='||v_day(1));
dbms_output.put_line('v_day(2)='||v_day(2));
dbms_output.put_line('v_day(2)='||v_day(3));
dbms_output.put_line('v_day.last='||v_day.last);
if(v_day.exists(4)) then
dbms_output.put_line('v_day element available in index 4');
end if;
v_day.extend();
v_day(8):='Again Monday';
dbms_output.put_line('v_day.last='||v_day.last);
END;

Statement processed.
v_day(1)=Monday
v_day(2)=Tuesdsay
v_day(2)=Wednesday
v_day.last=7
v_day element available in index 4
v_day.last=8


Associative arrays ( formerly called PLSQL Table or Index by table): It is a set of key-value pairs. Each key is unique index used to locate the associated value.
The index can be either of string type(varchar2,long) or pls_integer.
In Varray and Nested table the index is predefined and maintained by oracle. oracle automatically assigns the next memory location. 
In associative arrays the index part and along with the value part is user defined. At a functional level this is the major difference.
we don't have to extend/initialize associative arrays like varrays,nested table.

Declare 
Type v_asso_array_type is table of varchar(30) index by varchar2(30);
v_day v_asso_array_type;
BEGIN
v_day('Day_1'):= 'Monday';
v_day('Day_2'):='Tuesdsay';
v_day('Day_3'):='Wednesday';
v_day('Day_4'):= 'Thursday';
v_day('Day_5'):='Friday';
v_day('Day_6'):='Saturdqay';
v_day('Day_7'):='Sunday';
END;

In Oracle Database, you can store collections such as nested tables and VARRAYs in table columns, but associative arrays (index-by tables) cannot be stored directly in database columns. Here’s a detailed explanation:

### 1. **Nested Tables**

**Nested tables** can be stored as a column type in a database table. They are suitable for scenarios where you need to model a one-to-many relationship or where each row in a table can have a variable number of child records.

#### Example:

1. **Create an Object Type:**

   Define an object type that represents the records in the nested table.

   ```sql
   CREATE OR REPLACE TYPE emp_obj AS OBJECT (
     emp_id   NUMBER,
     emp_name VARCHAR2(100)
   );
   /

   ```

2. **Create a Nested Table Type:**

   Define a nested table of the object type.

   ```sql
   CREATE OR REPLACE TYPE emp_tab IS TABLE OF emp_obj;
   /
   ```

3. **Create a Table with a Nested Table Column:**

   Define a table with a column of the nested table type.

   ```sql
   CREATE TABLE department_employees (
     department_id NUMBER,
     employees     emp_tab
   ) NESTED TABLE employees STORE AS employees_tab;
   ```

4. **Insert Data into the Table:**

   Insert rows into the `department_employees` table with nested tables.

   ```sql
   INSERT INTO department_employees (department_id, employees)
   VALUES (
     10,
     emp_tab(
       emp_obj(1, 'John Doe'),
       emp_obj(2, 'Jane Smith')
     )
   );
   ```

5. **Query the Table:**

   Query the table and use the nested table data.

   ```sql
   SELECT department_id, t.*
   FROM department_employees d,
        TABLE(d.employees) t;
   ```

   **Output:**
   ```
   DEPARTMENT_ID    EMP_ID   EMP_NAME
   -------------   -------  -----------------
   10              1        John Doe
   10              2        Jane Smith
   ```

### 2. **VARRAYs (Variable-Size Arrays)**

**VARRAYs** can also be stored as a column type in a database table. They are suitable for scenarios where the number of elements is limited and relatively small.

#### Example:

1. **Create a VARRAY Type:**

   Define a VARRAY type with a maximum number of elements.

   ```sql
   CREATE OR REPLACE TYPE phone_numbers AS VARRAY(10) OF VARCHAR2(20);
   /
   ```

2. **Create a Table with a VARRAY Column:**

   Define a table with a column of the VARRAY type.

   ```sql
   CREATE TABLE employees (
     employee_id NUMBER,
     name        VARCHAR2(100),
     phones      phone_numbers
   );
   ```

3. **Insert Data into the Table:**

   Insert rows into the `employees` table with VARRAY data.

   ```sql
   INSERT INTO employees (employee_id, name, phones)
   VALUES (
     1,
     'Alice Johnson',
     phone_numbers('123-4567', '890-1234')
   );
   ```

4. **Query the Table:**

   Query the table and use the VARRAY data.

   ```sql
   SELECT employee_id, name, phones
   FROM employees;
   ```

   **Output:**
   ```
   EMPLOYEE_ID    NAME           PHONES
   ------------  --------------- ------------------------
   1             Alice Johnson  PHONE_NUMBERS( '123-4567', '890-1234' )
   ```

### 3. **Associative Arrays**

**Associative arrays** (also known as index-by tables) cannot be stored directly in database columns. They are only used within PL/SQL blocks and cannot be persisted in database tables. They are primarily used for temporary data storage and manipulation during the execution of PL/SQL code.

### Summary

- **Nested Tables**: Can be stored in a database column and are used to represent one-to-many relationships or collections of data.
- **VARRAYs**: Can be stored in a database column with a predefined maximum size and are used for small, fixed-size collections.
- **Associative Arrays**: Cannot be stored in database columns; they are used for temporary in-memory storage in PL/SQL.

These types of collections provide flexibility in handling structured data within Oracle databases, allowing you to model complex relationships and data structures effectively. If you need more examples or further details, feel free to ask!


