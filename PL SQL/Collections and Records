Data Types -> Scalar data types and Composite Data types and Reference Types

Scalar Data Types: Can be used to store only one value in one variable
NUMBER, PLS_INTEGER, BINARY_FLOAT,BINARY_DOUBLE
CHAR, VARCHAR2, NCHAR, NVARCHAR2
RAW
BOOLEAN
BLOB, CLOB, NCLOB
DATE, TIMESTAMP

Composite Datatypes:
1.Record : Hold one row of data eg: one row of employee can be stored in a variable.
Can be defined using Type keyword and %rowtype.The type mentioned here refers to the TYPE definition.
The internal components can have different data type, and are called elements.
Each field of a record variable can be accessed by its name with the syntax variable_name.field_name.
Record type cannot be created at schema level.

Example of record with select, insert and update statement usage
--create table emp_bkp as select * from emp where 1=2;
declare
v_emp_rec emp%rowtype;
begin
select * 
into v_emp_rec
from emp 
where empno =5;
-- using insert statement with record
--insert into emp_bkp values v_emp_rec;
-- using update statement with record
--v_emp_rec.sal =V_emp_rec.sal+100;
--v_emp_rec.deptno ='50';
-- update emp set row =v_emp_rec where empno =5;
dbms_output.put_line('emp name='||v_emp_rec.ename);
dbms_output.put_line('salary='||v_emp_rec.sal);
end;

Example of record created from cursor
declare 
cursor c1 is select empno,ename,job from emp;
lv_emp_rec c1% rowtype;
BEGIN
open c1;
fetch c1 into lv_emp_rec;
close c1;
dbms_output.put_line('empno='||lv_emp_rec.empno);
dbms_output.put_line('name='||lv_emp_rec.ename);
dbms_output.put_line('job='||lv_emp_rec.job);
end;

creating a record using type definition
Three ways to assign values to a record is given in the below example : 
using select statement , using record_name.field_name , using constructor at the time of declaration.

Declare 
Type emp_rec_type is record 
(empname varchar2(100), 
empsal number);
-- while using not null constraint in record , value should be assigned to the field while declaration.
--empname varchar2(100) not null:'SIVAM',
-- we can use %type to inherit the datatype of a column from a database table. used to define the datatype of a field/variable
--empname emp.ename%type (table_name.colum_name%type)
emp_rec emp_rec_type;
-- using constructor to assign values to a record
--emp_rec emp_rec_type :=emp_rec_type('SIVA',100);
BEGIN
emp_rec.empname :='SIVA';
emp_rec.empsal :=100;
--select ename,sal into emp_rec from emp where empno =7934;
dbms_output.put_line('empname='||emp_rec.empname);
dbms_output.put_line('empsal='||emp_rec.empsal);
end;

2.Collection : A collection is an ordered group of logically related elements. 
Has three types of collection : Varrray, Nested Table, Associative array.
The internal components always have the same data type, and are called fields. 
Each element of a collection variable can be accessed by its unique index  with the syntax variable_name(index) .
Can be defined using Type keyword to create a collection type and create a variable of that collection type and or %type.

Varrays
Store the elements of same data type 
variable sized array whose no of elements can vary from from zero to the declared maximum size.
The lower bound of index starts from 1.

Define,Declare, initialize,assign, access

Declare
Type V_Array_type is VARRAY(7) of VARCHAR2(30);
v_day V_Array_type := V_Array_type (NULL,NULL,NULL,NULL,NULL,NULL,NULL);
-- when initialized memory for all the 7 elements are allocated
BEGIN
v_day(1):= 'MONDAY';
v_day(2):='TUESDAY';
v_day(3):='Wednesday';
dbms_output.put_line('v_day(1)='||v_day(1));
dbms_output.put_line('v_day(2)='||v_day(2));
end;

Exceptions (not restricted to varrays, but common for all three collections):
Initialization is mandatory otherwise we will get 'Reference to uninitialized collection' exception. we can't leave v_day V_Array_type
without initializing it with empty constructor.
if we execute the below code without extend, then we will get subscription beyond count exception.
if we create array of 7 elements and try to extend it for 8 elements using v_day.extend(8) , susbcript outside of limit exception will occur
Declare
Type V_Array_type is VARRAY(7) of VARCHAR2(30);
v_day V_Array_type := V_Array_type ();
BEGIN
v_day.extend();
-- .extend by default extends one element
-- for extending menory for 2 elements v_day.extend(2);
v_day(1):= 'MONDAY';
dbms_output.put_line('v_day(1)='||v_day(1));
end;


