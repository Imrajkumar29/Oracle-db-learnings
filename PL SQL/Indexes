What is index? 
    Index helps to access data from the database in a faster and easier manner. 
    Index is a schema object that contains entry of each value of the indexd columns of the table and provides direct,fast access to rows.
    Index will take the rowid and access the table data.
    rowid - easiest way to indetify a record in a table. Physical address of where a particular row is located in the database.
    Hexadecimal number which gives information about the dat file, segment,which extent this row is stored.
 
 How to create index? (select * from  emp_t);
     B-Tree Index-> create index idx1_btree1_empno on emp_t(empno); created on column where data is widely distributed.
     Bitmap Index-> create bitmap index idx2_bitmap_deptno on emp_t(deptno); created on column with lesser distinct values. like dept no has only 3 distinct values
     and they get repeated.eg: gender, pass or fail , yes or no type of values.
     function Based Index->create index idx3_fn_ename on emp_t(upper(ename))
     reverse key index-> create index idx4_revkey_sal on emp_t(sal) reverse -> to avoid index block contention reverse key index is used.
     composite index -> create index idx5_comp_idx on emp_t(job,deptno)
     
 Where to check metadata info about indexes? -> name of the index , table name on which index is created, type of index.
      user_indexes 
      user_ind_columns->select * from user_ind_columns where table_name ='EMP_T';
      user_ind_statistics->select * from user_ind_statistics where table_name ='EMP_T';
      user_ind_expressions->select * from user_ind_expressions where table_name ='EMP_T'; for function based index.
    
 What are the types of Index?
     1. B-Tree Index.->Index organised tables, Reverse Key indexes, Descending indexes, B-Tree Cluster indexes.
     2. Bitmap and bitmap join indexes.->
     3. function Based Indexes.
     
B-Tree Index
What is B-tree index ? How index data is stored?
       stands for Balanced trees. B-Tree index is an ordered list of values divided into ranges along with
       the rowid information stored in the index segment. access the records in the table with the help of rowid.
       eg: create index idx_empno on emp_tab(empno);
       
       when the following query is run ,select * from employee where emp_id =5 . Oracle optimizer, Through meta data information identifies the index details.
       Starts the search from index root map, searches all the records with 5 and goes to the particular record
       Though it identifies the first instance of 5 , it continues the search till all instances of 5 are found (in case the column is non unique).       
        
Where to find the metadata information?
      user_indexes -> select * from user_indexes where table_name ='EMP_T';
      user_ind_columns->select * from user_ind_columns where table_name ='EMP_T';
      user_ind_statistics->select * from user_ind_statistics where table_name ='EMP_T';
      user_ind_expressions->select * from user_ind_expressions where table_name ='EMP_T';
      
How to find whether  index is used by the query?
      By running the explain plan -> In table access-> index , object_name -> index name 
      Once the query is run -> select * fromv$sql where sql_text like '%from emp where empno=5%'--> will give sql_id
      select sql_id, operation,options, object_name,object_type, cost,cardinlaity from v$sql_plan where sql_id ='' use sql_id from previous query.
      Another way -> monitoring the index
      
When to create B-tree index?
      B-Tree index are suitable for columns containing high number of unique values. eG: account number, student reg number, employee id
      Cardinality-> the ratio of distinct values to the number of table tows. A column with only two distinct values in a million row table would have low cardinality.
      When cardinality is high , B-tree is recommended else Bitmap is recommended.

What types of scan operations B-tree index will do?
       Range scan- searches for a range of values . can be seen in explain plan.
       Unique scan- to perform unique scan create an unique index. moment it finds the first key value goes through the execution and returns the record.
                    unique scan is faster compared to range scan.
       Full scan - full scan of the index data. 
                    eg: create index idx_sal on emp(sal);/select sum(sal) from emp;       
       Full scan(min/max) - eg : create index idx_sal on emp(sal);/select sum(sal) from emp;
       Fast Full scan - create index idx_sal on emp(sal);/create index idx_empno on emp(empno); ->select empno,sal from emp;
                        retrieves the data from two indexes ,combines and returns the output.
                        
Note:Oracle will not index the null values. 

Can we create index for all columns?
        not recommended .will slower the performance as we are duplicating the entire table once again. 
        Instead can create and index organised table.Data is stored in the table in the sorted order itself.

What are the advantages/disadvantages of B-tree index?
        improves the performance.
        dml statement performance wil degrade. when dml operation is performed, oracle has to manage the index also.
        everytime a insert is performed oracle has to rearrange the data.


Bitmap Index
        In a bitmap index, the database stores a bitmap for each index key. In a conventional B-tree index, one index entry points to a single row. 
        In a bitmap index, each index key stores pointers to multiple rows.
        Bitmap indexes are primarily designed for data warehousing or environments in which queries reference many columns in an ad hoc fashion.
        Situations that may call for a bitmap index include:
        The indexed columns have low cardinality, that is, the number of distinct values is small compared to the number of table rows.
        eg :gender, status , etc which will have lesser distinct values.
        The indexed table is either read-only or not subject to significant modification by DML statements.
        Each bit in the bitmap corresponds to a possible rowid. If the bit is set, then the row with the corresponding rowid contains the key value.
        A mapping function converts the bit position to an actual rowid, so the bitmap index provides the same functionality as a B-tree index 
        although it uses a different internal representation.
        Eg:
        Value Row1 Row2 Row3 Row4 Row5 Row6 Row7
        M      1    0   1     1    1    0    0
        F      0    1   0     0    0    1    1
        
        A mapping function converts each bit in the bitmap to a rowid of the customers table. 
        Each bit value depends on the values of the corresponding row in the table.
        For example, the bitmap for the M value contains a 1 as its first bit because the gender is M in the first row of the customers table.
        The bitmap cust_gender='M' has a 0 for its the bits in rows 2, 6, and 7 because these rows do not contain M as their value.

Bitmap index Issue with DML operations
        If the indexed column in a single row is updated, then the database locks the index key entry (for example, M or F)
        and not the individual bit mapped to the updated row. Because a key points to many rows,
        DML on indexed data typically locks all of these rows. For this reason, bitmap indexes are not appropriate for many OLTP applications.


Explain Function Based Index?
         A function-based index computes the value of a function or expression involving one or more columns and stores it in the index. 
         A function-based index can be either a B-tree or a bitmap index. 
         The function used for building the index can be an arithmetic expression or an expression that contains a SQL function,
         user-defined PL/SQL function, package function, or C callout.
         The optimizer can use an index range scan on a function-based index for queries with expressions in WHERE clause.
 
 For example, suppose you create the following function-based index:

        CREATE INDEX emp_total_sal_idx
          ON employees (12 * salary * commission_pct, salary, commission_pct);

        The database can use the preceding index when processing queries below:
        SELECT   employee_id, last_name, first_name, 
                 12*salary*commission_pct AS "ANNUAL SAL"
        FROM     employees
        WHERE    (12 * salary * commission_pct) < 30000
        ORDER BY "ANNUAL SAL" DESC;

        CREATE INDEX emp_fname_uppercase_idx 
        ON employees ( UPPER(first_name) ); 

        SELECT * 
        FROM   employees
        WHERE  UPPER(first_name) = 'AUDREY'; 

Uses of Function-Based Indexes
        Function-based indexes are efficient for evaluating statements that contain functions in their WHERE clauses. 
        The database only uses the function-based index when the function is included in a query. 
        When the database processes INSERT and UPDATE statements, however, it must still evaluate the function to process the statement.

      A function-based index is also useful for indexing only specific rows in a table. For example, the cust_valid column in the sh.
        customers table has either I or A as a value. To index only the A rows, you could write a function that returns
        a null value for any rows other than the A rows. You could create the index as follows:

        CREATE INDEX cust_valid_idx
        ON customers ( CASE cust_valid WHEN 'A' THEN 'A' END );
        
Reverse Key Index
This is used to resolve the index block contention.
The key column values are reversed and stored in the index segment.
when we query a table with reverse key index  it will go for a full table scan as the key column values are not in the sorted under unlike a btree index.

When to choose what type of index?
    B-Tree indexes are suitable for columns containing high number of unique values. eg : account no, reg no.
    Bitmap index are suitable for table with low cardinality value. 
    Function based indexes are mainly used whenever the functions are used with columns or an expression is frequently used in where condition.
    Reverse key index is mainly used to avoid the index block contention.

How to know index is being used:
 Check the explain plan. But explain plan will show the estimated plan. The plan that oracle is going to execute.
 Actual plan can be obtained from the underlying data dictionary tables
 Step1 : select * from v$sql where sql_text like 'from emp where empno=5%'; get the sql_id 
 Step2 : select sql_id , operation, options, object_name, object_type, cost,cardinality from v$sql_plan where sql_id ='g5hutuqd';
 v$sql_plan - is the actual explain plan
 
How to Monitor index usage
Step1 : Alter index Idx_EMPNO MONITORING USAGE; - will mark index for monitoring
step2 : select * from emp where empno =7788; running the query which uses the index(run the application).
step3 : Alter index Idx_EMPNO NOMONITORING USAGE;

In case the index is being used it will be captured in dba_object_usage table. 
select * from dba_object_usage; - will show if index is used/not. alternate old table ->v$object_usage


Benefits/Drawbacks of Index
    Benefits -> Perfomance improvement
    Drawbacks-> consumes considerable amount of space, DML performance might get impacted, index needs to be managed.
        
Question1. Can index be created in primary key column
    When a table is created with primary key 2 things happen.
    1. primary key constraint is created on the table
    2. an unique index is created on primary key column automatically.

Question2. Can more than one index be created in same column?
    If a column has index oracle will not allow to create one more index in the same column. 
    But an invisible index can be created on a column which already has an index.
    create index idx1 on T(col1) invisible.


An **Index-Organized Table (IOT)** in Oracle Database is a special type of table where data is stored in a **B-tree index structure**, rather than in a traditional heap-organized table. In an IOT, the table data is stored along with the index, and the rows are stored in an indexed order based on the **primary key**. This structure is particularly useful for queries that frequently access rows by the primary key.

### Key Characteristics of Index-Organized Tables (IOTs):

1. **Primary Key-Ordered Storage**: Data is stored in the order of the primary key.
2. **Efficient Retrieval**: Since data is stored along with the index, retrieval by the primary key is very fast.
3. **No Separate Index**: There's no need for a separate index on the primary key because the table itself is stored as an index.
4. **Reduces Redundancy**: It avoids duplicating the primary key values in a separate index and the table.
5. **Less Suitable for Full Table Scans**: While efficient for primary key access, IOTs are not as efficient for full table scans as heap-organized tables.

### Why Use an IOT?

- IOTs are useful in OLTP (Online Transaction Processing) environments where queries are predominantly based on primary key access.
- When you have large tables with frequent lookups based on primary keys and the need to minimize storage for indexes.

### Syntax for Creating an IOT:

```sql
CREATE TABLE iot_employees (
    employee_id NUMBER,
    first_name VARCHAR2(50),
    last_name VARCHAR2(50),
    hire_date DATE,
    department_id NUMBER,
    salary NUMBER,
    CONSTRAINT pk_emp PRIMARY KEY (employee_id)
) ORGANIZATION INDEX;
```

In this example, the table `iot_employees` is organized by the **primary key** `employee_id`. The data in the table will be stored in a B-tree index structure, and no separate heap storage is used.

### Example Scenario:

#### Step 1: Creating an Index-Organized Table

```sql
CREATE TABLE iot_employees (
    employee_id NUMBER,
    first_name VARCHAR2(50),
    last_name VARCHAR2(50),
    hire_date DATE,
    department_id NUMBER,
    salary NUMBER,
    CONSTRAINT pk_emp PRIMARY KEY (employee_id)
) ORGANIZATION INDEX;
```

#### Step 2: Inserting Data

```sql
INSERT INTO iot_employees (employee_id, first_name, last_name, hire_date, department_id, salary)
VALUES (101, 'John', 'Doe', TO_DATE('2023-01-15', 'YYYY-MM-DD'), 10, 5000);

INSERT INTO iot_employees (employee_id, first_name, last_name, hire_date, department_id, salary)
VALUES (102, 'Jane', 'Smith', TO_DATE('2022-06-01', 'YYYY-MM-DD'), 20, 5500);
```

#### Step 3: Querying Data by Primary Key (Efficient Access)

```sql
SELECT * FROM iot_employees WHERE employee_id = 101;
```

**Output:**

| EMPLOYEE_ID | FIRST_NAME | LAST_NAME | HIRE_DATE  | DEPARTMENT_ID | SALARY |
|-------------|------------|-----------|------------|---------------|--------|
| 101         | John       | Doe       | 2023-01-15 | 10            | 5000   |

Since the `iot_employees` table is an IOT, retrieving data based on the `employee_id` (the primary key) is fast because the data is stored in the index itself.

#### Step 4: Verifying Storage in Data Dictionary

To check if a table is an index-organized table, you can query the **USER_TABLES** view:

```sql
SELECT table_name, iot_type
FROM user_tables
WHERE table_name = 'IOT_EMPLOYEES';
```

**Output:**

| TABLE_NAME   | IOT_TYPE |
|--------------|----------|
| IOT_EMPLOYEES | IOT      |

This confirms that the `IOT_EMPLOYEES` table is index-organized.

### Understanding Data Storage in IOTs

- In a **heap-organized table**, rows are stored in random order, and an index is maintained separately for fast lookups.
- In an **IOT**, the table data is stored directly within a B-tree structure, eliminating the need for a separate index on the primary key.
  
This results in the following:
- **Faster primary key lookups**: The table data and the index are stored together, reducing the need to access both an index and the table.
- **Storage savings**: Since the primary key is not stored twice (once in the table and once in the index), you save space.

### Example: Performance with an Index-Organized Table

Imagine a query that frequently retrieves data based on `employee_id` (the primary key):

```sql
SELECT * FROM iot_employees WHERE employee_id = 102;
```

Because `employee_id` is the primary key, Oracle does not need to consult an index first and then fetch the data from the table. Instead, it retrieves the data directly from the B-tree index structure, making the query faster than in a traditional heap-organized table.

### Comparison with Heap-Organized Tables:

- **Heap-Organized Table**:
  - Data is stored in an unordered fashion, and separate indexes are created for faster access.
  - Suitable for tables that require full table scans.
  
- **Index-Organized Table (IOT)**:
  - Data is stored in the B-tree index structure, ordered by the primary key.
  - More efficient for queries based on primary key lookups.
  - Less efficient for full table scans or queries that do not involve the primary key.

### When to Use IOT:
- Use IOTs when your queries primarily involve retrieving data by the primary key.
- Avoid IOTs if your queries often involve full table scans or access patterns that don't use the primary key.

By leveraging IOTs, you can significantly improve performance for specific access patterns, especially in high-read environments like transaction processing systems where fast key-based lookups are common.


Great question! Let's dive into the concepts of **buffer busy waits** and **latch contention** to help clarify why they occur and why they become a problem when multiple sessions try to insert rows into the same index block.

### 1. **Buffer Busy Waits**
A **buffer busy wait** is a wait event that occurs when a session wants to access a block in the buffer cache (i.e., a block in memory), but another session is already accessing or modifying that block, so the first session must **wait** until the block becomes available.

#### How it Works:
- Oracle uses the **buffer cache** to store data blocks in memory, minimizing disk I/O and improving performance.
- When a session needs to read or modify a block, it first checks if the block is in the buffer cache.
  - If the block is not in the cache, it is read from disk and placed into memory.
  - If the block is already in the buffer cache but is being accessed or modified by another session, the session must **wait** for the block to become available.

In the context of **index block contention**, many sessions might be trying to insert rows into the same index block (e.g., the rightmost block of a sequential index). Only one session can modify the block at a time, causing other sessions to wait until the block is free.

### 2. **Latch Contention**
A **latch** is a low-level locking mechanism Oracle uses to protect internal memory structures, such as the buffer cache or index blocks. Latches are simpler and faster than locks but are less sophisticated, and they are used to ensure that only one process can modify a memory structure at a time.

#### How it Works:
- When a session tries to access or modify an index block in the buffer cache, it must first **acquire a latch** to ensure that no other session is modifying that block at the same time.
- If multiple sessions are attempting to access the same block simultaneously, they will compete for the latch. If one session holds the latch, others must **wait** until the latch is released. This waiting time is known as **latch contention**.

In the case of **index block contention**, all sessions are trying to modify the same rightmost block of an index, leading to latch contention. As more sessions attempt concurrent inserts, the contention for the latch becomes more severe, causing performance degradation due to the increased wait time.

### 3. **Why is this a Problem When Multiple Sessions Try to Access the Same Rightmost Block?**

In a B-tree index with **sequentially increasing keys** (like an auto-incrementing primary key or a timestamp), new index entries are always inserted into the **rightmost block** of the index.

#### Here's what happens:
1. **Multiple Sessions Insert**: Imagine that many sessions are inserting rows into a table, and the index is being updated based on a sequential key (e.g., `ID` column that increases by 1 for each new row).
2. **Same Index Block**: All those insert operations are targeting the same **rightmost block** of the index because the new keys are in sequential order.
3. **Single Block Access**: Only one session can modify the rightmost block at a time. When one session is modifying it (inserting a new index entry), other sessions must wait until that session finishes.
4. **Buffer Busy Waits and Latch Contention**: Since many sessions are contending to modify the same block, they experience **buffer busy waits** (waiting for the block) and **latch contention** (waiting for a latch to modify the block). As more sessions try to modify the same block, the contention becomes more severe, leading to performance bottlenecks.

### **Why Can't Each Session Just Insert a New Row and Move On?**

The problem arises because each insert operation requires not just inserting a new row into the table but also **updating the index**. Here's why sessions can't just insert and move on:

1. **Index Block Update**: When a new row is inserted, Oracle must also update the corresponding index (e.g., the primary key index) by adding the new key to the index structure. For sequential indexes, the new key must be added to the rightmost block.
2. **Serialized Access**: Since only one session can modify the rightmost block at a time, other sessions are forced to wait for their turn. This leads to **buffer busy waits** and **latch contention** because multiple sessions are all trying to update the same block concurrently.
3. **Contention Increases with Concurrency**: The more concurrent sessions there are trying to insert rows, the higher the likelihood of contention for the same block, causing **increased wait times** and **performance degradation**.

### 4. **How Reverse Key Index Helps Solve the Problem**

A **reverse key index** addresses this issue by **distributing new inserts across different index blocks**, rather than concentrating them all in the rightmost block.

#### How it Works:
- In a reverse key index, the byte order of the index key is reversed before it is stored. For example, `12345` becomes `54321`, and `12346` becomes `64321`.
- This randomizes the key order, which means that new index entries are not inserted into the same block but spread across the entire index.
- As a result, **insert operations are distributed across multiple blocks**, reducing **buffer busy waits** and **latch contention**, and improving performance in high-concurrency environments.

### Example Scenario:
Consider a table with an increasing `transaction_id`:
- Without a reverse key index, all new inserts target the rightmost block, leading to **index block contention** as many sessions try to insert at the same point in the index.
- With a reverse key index, new inserts are spread across different blocks, which greatly reduces contention and improves the performance of concurrent inserts.

### Conclusion

The issue of **buffer busy waits** and **latch contention** arises because Oracle needs to protect shared memory structures, such as index blocks, during concurrent access. When multiple sessions try to insert into the same index block, they must wait for each other, causing performance bottlenecks. A **reverse key index** helps solve this problem by spreading insert operations across multiple blocks, reducing contention and improving performance in high-concurrency environments.

Let me know if you’d like more clarification or examples!

