How to start with PLSQL Tuning?
  1. Manual inspection of code.  
  -will work when no of lines in the code is less
  - may not work if too many plsql calls internally.
  2. Execute the code with multiple log statements and analyze the statement that takes more time.
  3. Tune the SQL code and PL SQL code seperately.

DBMS_PROFILER-  a package provided by oracle to capture the information about the PL SQL code execution. 
  used to identify the performance bottleneck.

How to use DBMS_PROFILER
  Environment setup( one time setup) -> Profiler Execution (executed any no of times) -> Analyze profiler data-> Optimize the PL SQL. 

Environment Setup
  1. DBMS_PROFILER will be available as part of sys schema. 
  2. Ensure you have the privilege to execute thye package ( if not , grant execute permission from sys schema)
  3. Create the profiler tables to capture the profiler data.

run the following statement to create 3 profiler tables
  @c:\Learning\OracleApp\rdbms\admin\proftab.sql
  select * from user_tables where table_name like'%PROF%';
  Tables created ->PLSQL_PROFILER_RUNS,PLSQL_PROFILER_UNITS,PLSQL_PROFILER_DATA,
  Sequence created ->PLSQL_PROFILER_RUNNUMBER

running profiler execution
  exec dbms_profiler.start_profiler('test_run_1');
  exec proc_a;
  exec dbms_profiler.stop_profiler();
  
  select * from  plsql_profiler_runs; -> one row for each execution ,-> runid -> plsql_profiler_units
  select * from plsql_profiler_units; -> anonymous blocks, procs, functions etc. unit_number ->plsql_profiler_data
  select * from plsql_profiler_data; -> contains line by line information. how much time a particular line is invoked. runid -> plsql_profiler_runs

Find below procs for testing 
Create or Replace procedure Proc_c
as 
lv_avg_sal number;
begin
for i in 1..50 loop
select avg (salary) into lv_avg_sal from employees;
end loop;
end;
/
show errors;

Create or Replace procedure Proc_b 
as 
lv_date date;
begin
for i in 1..50 loop 
proc_c;
select sysdate into lv_date from dual;
end loop;
end;
/
show errors;

Create or Replace procedure Proc_a 
as 
lv_count number;
begin
select count(*) into lv_count from user_tables,all_objects;
for i in 1..50 loop 
proc_b;
end loop;
end;
/
show errors;


Query to find the line wise time taken

SELECT
plsql_profiler_runs.RUN_DATE, 
plsql_profiler_runs.RUN_COMMENT,
plsql_profiler_units.UNIT_TYPE, 
plsql_profiler_units.UNIT_NAME,
plsql_profiler_data.LINE#, 
plsql_profiler_data.TOTAL_OCCUR, 
plsql_profiler_data.TOTAL_TIME, 
plsql_profiler_data.MIN_TIME, 
plsql_profiler_data.MAX_TIME,
round(plsql_profiler_data.total_time/1000000000) total_time_in_sec,
trunc(((plsql_profiler_data.total_time)/(sum(plsql_profiler_data.total_time) over()))*100,2) pct_of_time_taken
FROM
    plsql_profiler_data,plsql_profiler_runs,plsql_profiler_units
where plsql_profiler_data.total_time > 0 
and plsql_profiler_data.runid = plsql_profiler_runs.runid
and plsql_profiler_units.UNIT_NUMBER = plsql_profiler_data.UNIT_NUMBER
and plsql_profiler_units.runid = plsql_profiler_runs.runid
ORDER BY
    plsql_profiler_data.total_time DESC;
    

Scripts to clear the profiler tables

truncate table plsql_profiler_data;
delete from plsql_profiler_units;
delete from plsql_profiler_runs;



