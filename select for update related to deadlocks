Select For Update
You're at risk of deadlock if a transaction runs two or more update statements on the same table. And two people running the transaction may update the same rows, but in a different order.

In these cases you should lock the rows before running any updates. You can do this with select for update. Like update itself, this locks rows matching the where clause. To use is, place the "for update" clause after your query.

So the following locks all the rows with the colour red:

select * from bricks
where  colour = 'red'
for    update;
No one else can update, delete or select for update these rows until you commit or rollback.

You can use this to avoid deadlock by running a select for update at the start of your transaction. For example, to avoid the deadlock described in the previous module, a run select for update at the start. This selects rows for the colours red and blue. Then run the updates:

select * from bricks
where  colour in ( 'red', 'blue' )
for    update;

update bricks
set    quantity = 1001
where  colour = 'red';

update bricks
set    quantity = 1722
where  colour = 'blue';
Changing the transactions to do this gives the following outcome:

Transaction 1	Transaction 2
select * from bricks
where  colour in ( 'red', 'blue' )
for    update;
select * from bricks
where  colour in ( 'red', 'blue' )
for    update;
-- this session is now blocked, 
-- waiting for transaction 1
update bricks
set    quantity = 1001
where  colour = 'red';

update bricks
set    quantity = 1722
where  colour = 'blue';
commit;
-- transaction 2 can now continue
update bricks
set    unit_weight = 8
where  colour = 'blue';

update bricks
set    unit_weight = 13
where  colour = 'red';

commit;
Deadlock can also happen when a transaction updates two or more different tables. If two separate transactions update two tables in a different order, you'll have deadlock.

This is harder to avoid. You need to ensure all transactions lock tables in the same order. You need define an order for acquiring locks. And ensure all developers on the application using the same method. This requires thorough documentation, code reviews, and testing to ensure deadlock is impossible.

Lost Updates
A lost update happens when two people change the same row and one overwrites another's changes. This is a common problem if you set values for all column not in the where clause. Regardless of whether the user changed the value.

You could avoid the issue above by having separate forms for managing weights and quantities. Saving changes in each of these runs an update which only changes values in the relevant column.

But separation like this isn't always possible. And it's more work to develop. In general to avoid lost updates you can use pessimistic or optimistic locking.

Pessimistic locking locks rows from the time the user first queries them with select for update. The lock remains until they save their changes. To use it, you need a stateful application. This is rare in the web, where most applications are stateless. Most applications you work on will use optimistic locking.

Optimistic locking works by checking values the user read are still the same when they update the row. If they aren't the update does nothing.

There are many ways you can do this, including:

Adding a version number to each row
Adding a last updated timestamp to each row
Checking that the current values match those queried when you run your update
