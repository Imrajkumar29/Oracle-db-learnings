Pre requisite query 
create table bricks (
  colour      varchar2(10),
  shape       varchar2(10),
  quantity    integer,
  unit_weight integer
);

insert into bricks values ( 'red', 'cylinder', 1, 13 );
insert into bricks values ( 'blue', 'cube', 51, 8 );
insert into bricks values ( 'green', 'cube', 600, 8 );

commit;

Deadlocks
When a transaction runs many updates, you need to take care. If two or more people try to change the same rows at the same time, you can get into deadlock situations. This is where sessions form a circle, each waiting on the other.

In the example below, both transactions start by updating different rows. So the first session has locked the rows with the colour red. And the second locks rows with the colour blue.

The first session then tries to update rows storing blue. But transaction two has these locked! So it's blocked, waiting for transaction 2 to complete.

But transaction two, instead of committing or rolling back, tries to update rows storing red. But transaction one has these rows locked! So it's stuck. At this point both sessions are waiting for the other to release a lock.

Deadlock!

Transaction 1	Transaction 2
update bricks
set    quantity = 1001
where  colour = 'red';
update bricks
set    unit_weight = 8
where  colour = 'blue';
update bricks
set    quantity = 1722
where  colour = 'blue';

-- this session is now blocked, 
-- waiting for transaction 2
update bricks
set     unit_weight = 13
where   colour = 'red'
-- at this point both sessions 
-- are waiting on each other
-- the database will stop one
-- of them, raising an ORA-60
When deadlock happens, Oracle Database will detect it. The database will then stop one of the statements, raising an ORA-00060.

You can simulate a deadlock in one session with autonomous transactions. These start a transaction within a transaction.

So the following code contains two transactions. The parent transaction updates all the rows in bricks, blocking other changes to these rows. The autonomous transaction after it also tries to update all the rows.

This is impossible. For the parent transaction to continue, the child autonomous transaction must complete. But the update in the parent blocks the update in the child child!

So the database identifies this as a deadlock. It stops the second update, raising ORA-00060. And allows you to commit or rollback the first update:

update bricks
set    quantity = 60;

declare
  pragma autonomous_transaction;
begin
  update bricks
  set    unit_weight = 55;
  commit;
end;
/

select * from bricks;

rollback;
Note that an update locks the whole row. Even though the two updates set different columns, the second is still blocked. Leading to deadlock.

Deadlocks are caused by errors in your code. To avoid them, you must change how you write your transactions.
